# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bilibili.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import requests
import pyttsx3.drivers
import pyttsx3.drivers.sapi5
import time
import pyttsx3
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import *
ip='22348576'


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(750, 300)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(350, 40, 180, 50))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 100, 500, 30))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(60, 100, 140, 30))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(60, 220, 333, 30))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(400, 160, 100, 30))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(260, 160, 90, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_4.setFont(font)
        self.label_4.setAcceptDrops(False)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(60, 160, 190, 30))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 750, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        #点击功能
        self.pushButton.clicked.connect(self.label_3.show)
        self.pushButton.clicked.connect(self.slot)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "自制B站弹幕姬"))
        self.label.setText(_translate("MainWindow", "B站弹幕姬"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "\'22348576\'(房间号)"))
        self.label_2.setText(_translate("MainWindow", "请输入房间号："))
        self.label_3.setText(_translate("MainWindow", "正在执行》》》》"))
        self.label.setStyleSheet("color:#bb00ff")#设置字体颜色
        self.label_2.setStyleSheet("color:#bb00ff")
        self.label_3.setStyleSheet("color:red")
        self.label_4.setStyleSheet("color:#bb00ff")
        self.label_5.setStyleSheet("color:#bb00ff")
        self.label_3.hide()
        self.pushButton.setText(_translate("MainWindow", "执行"))
        self.pushButton.setStyleSheet("color:red")
        self.label_4.setText(_translate("MainWindow", "7734200"))
        self.label_4.setTextInteractionFlags(Qt.TextSelectableByMouse)  # 设置可复制
        self.label_5.setText(_translate("MainWindow", "测试房间号（可复制）："))

    # 警告框
    def messageDialog(self):
        msg_box = QMessageBox(QMessageBox.Warning, '提示', '请输入房间号    ')
        msg_box.exec_()

    def slot(self):
        print('正在运行')
        ip=str(self.lineEdit.text()) # 获取输入·框的值self.lineEdit.text()
        if ip=='':
            print('未输入')
            self.label_3.setText( "请重新输入房间号")
            self.messageDialog()
        else:
            print(ip)
            bDanmu = Danmu(ip);
            while True:
                # 暂停1秒防止cpu占用过高
                time.sleep(1);
                # 获取弹幕
                bDanmu.get_danmu();

#————————————————————————————————————————————————————


class Danmu:
    def __init__(self,ip):
        # 弹幕url
        self.url = 'https://api.live.bilibili.com/xlive/web-room/v1/dM/gethistory';
        # 请求头
        self.headers = {
            'Host': 'api.live.bilibili.com',
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0',
        }
        # 定义POST传递的参数
        self.data = {
            'roomid': ip,#房间号
            'csrf_token': '',
            'csrf': '',
            'visit_id': '',
        }
        # 日志写对象
        self.log_file_write = open('danmu.log', mode='a+', encoding='utf-8');
        # 读取日志
        log_file_read = open('danmu.log', mode='r', encoding='utf-8');
        self.log = log_file_read.readlines();

    def get_danmu(self):
        # 获取直播间弹幕
        html = requests.post(url=self.url, headers=self.headers, data=self.data).json();
        #print( requests.post(url=self.url, headers=self.headers, data=self.data).text)
        # 解析弹幕列表
        for content in html['data']['room']:
            # 获取昵称
            nickname = content['nickname'];
            # 获取发言
            text = content['text'];
            # 获取发言时间
            timeline = content['timeline'];
            # 记录发言
            msg2=nickname + ': ' + text
            msg = timeline + ' ' + nickname + ': ' + text;
            # 判断对应消息是否存在于日志，如果和最后一条相同则打印并保存
            if msg + '\n' not in self.log:
                # 打印消息
                print(msg);
                speaker(msg2)
                # 保存日志
                self.log_file_write.write(msg + '\n');
                # 添加到日志列表
                self.log.append(msg + '\n');

def speaker(msg):
    # msg = '''盼望着，盼望着，东风来了，春天的脚步...'''
    teacher = pyttsx3.init()
    rate = teacher.getProperty('rate')
    teacher.setProperty('rate', rate -20)
    teacher.say(msg)
    teacher.runAndWait()
#————————————————————————————————————————————————————

import sys  #导入系统模块
def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)         #实例化QApplication类，作为GUI主程序入口
    MainWindow=QtWidgets.QMainWindow()             #创建MainWindow
    ui=Ui_MainWindow()                             #实例化ui类
    ui.setupUi(MainWindow)                         #设置窗口UI
    MainWindow.show()                              #显示窗口
    sys.exit(app.exec_())                          #当窗口创建完成时，需要结束主循环过程
if __name__=="__main__":
    show_MainWindow()