# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'video6.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSignal
from PyQt5.QtCore import Qt
import six
import packaging
import packaging.version
import packaging.specifiers
import packaging.requirements

from gevent import monkey#把下面有可能有IO操作的单独做上标记
monkey.patch_all()#将IO转换为异步执行的函数
"""也就是说，我们要先引用多协程模块monkey.patch_all()，再引用别的才行，不然会报错"""
import requests
from requests.exceptions import ReadTimeout,HTTPError,RequestException
import re,os
import random
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import time
import urllib3
import gevent
from gevent.queue import Queue
from gevent.lock import BoundedSemaphore
sem = BoundedSemaphore(1)
import sys
sys.setrecursionlimit(1000000)  # 例如这里设置为一百万
urllib3.disable_warnings()

i=0
i2=0
j=0
k=0
urllist=[]
urllist2=[]
urllist3=[]

user_agent_list = [ \
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1" \
    "Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11", \
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6", \
    "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6", \
    "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1", \
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5", \
    "Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5", \
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3", \
    "Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3", \
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3", \
    "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3", \
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3", \
    "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3", \
    ": Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36", \
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3", \
    "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19                                                      *                                   .0.1061.1 Safari/536.3", \
    "Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3", \
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24", \
    "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"
]

proxylist=[{"https":"https://83.166.111.67:9999"},	{"http":"http://183.166.70.242:9999"},]


workQueue = Queue()

path = r'E:\视频\电影2'
if not os.path.exists(path):
    os.makedirs(path)

def getlist(url):
    # 获取列表URL
    try:
        header = {'User-Agent': random.choice(user_agent_list)}  # 随机选一个user-agent
        #proxy ={'http': 'http://59.29.245.151:3128'}
        res=requests.get(url, headers=header,  verify=False,timeout=20)
        print('第%s轮，第一次·网络状态码: '%i,res.status_code)
        #print(res.content.decode('utf-8'))
        pattern = re.compile('<li><a href="/voddetail/(.*?)\.html" title="*?', re.S)  # <img class="" src=
        result = pattern.findall(res.text)
        print(result)#https://yinghuaav.site/voddetail/42483.html
        for url in result:
            url = 'https://yinghuaav.site/vodplay/%s-1-1.html'%url
            urllist.append(url)
        print(urllist)

    except HTTPError:
        print('httperror')
    except RequestException:
        print('reqerror')
    except ReadTimeout:
        print('time out')
    except Exception as e:
        print(e)
def indexlist(url):
    # 创建option对象
    option = Options()
    # 设置选项为无界面
    option.headless = True
    # 使用option配置chrome浏览器
    driver = webdriver.Chrome(options=option)
    driver.get(url)
    #time.sleep(2)
    a=driver.find_elements_by_tag_name('iframe')
    # for a1 in a[1:]:
    #     #print(a1.text)
    print(a[2].get_attribute('src'))
    url=(a[2].get_attribute('src')).split('=')[-1]
    print(url)
    urllist2.append(url)
    driver.quit()

def index2list(k):
    print('协程开始*************************%s' % k)
    while not workQueue.empty():
        url = workQueue.get(timeout=2)
        urllist5=[]
        global j
        j+=1
        header = {'User-Agent': random.choice(user_agent_list)}  # 随机选一个user-agent
        # proxy ={'http': 'http://59.29.245.151:3128'}
        res = requests.get(url, headers=header, verify=False, timeout=10)
        print('第%s轮，第一次·网络状态码: ' % j, res.status_code)
        #print(res.content.decode('utf-8'))
        pattern = re.compile('/20(.*?)\.ts', re.S)  # <img class="" src=
        result = pattern.findall(res.text)
        #print(result)
        for url in result:
            url='https://lbbf9.com/20%s.ts'%url
            #print(url)
            urllist5.append(url)
        print('第%s轮的'%j,urllist5)
        print(len(urllist5))
        down(urllist5,k)

def down(urllist5,kk):
    x=0
    for url in  urllist5:
        try:
            header = {'User-Agent': random.choice(user_agent_list)}  # 随机选一个user-agent
            #proxy = random.choice(proxylist)
            filename = path + '/' + str(url.split('/')[-4]) + '1.ts'
            x=x+1
            print('协程%s第%s次准备保存视频片段·' % (kk,x), url)
            with open(filename, 'ab') as f:
                f.write(requests.get(url, headers=header, timeout=30).content)
        except HTTPError:
            print('httperror')
        except RequestException:
            print('reqerror')
        except ReadTimeout:
            print('time out')
        except Exception as e:
            print(e)
        finally:
            pass

def boss():
    # 填充队列
    global i2
    for url in urllist2:
        #print('原', url)
        url = url.replace('index', '700kb/hls/index')
        print(url)
        i2 = i2 + 1
        workQueue.put_nowait(url)
    print('有%s个视频 ' % i2)

def main(url='https://yinghuaav.run/vodtype/31-2.html',number=15):
        startTime = time.time()
    # for b in range(4,5):
    #     url = 'https://yinghuaav.site/vodtype/27-%s.html'%b
        getlist(url)
        for url in urllist[:number]:
          indexlist(url)#url='https://lbbf9.com/20200623/LCB1td1k/index.m3u8'
        print('urllist2',urllist2)

        print("Started processes")
        # 创建一个协程任务
        gevent.spawn(boss).join()
        jobs = []
        for k2 in range(number):
            # 保存所有的协程任务
            jobs.append(gevent.spawn(index2list, k2))
        # joinall()接收一个列表，将列表里的所有协程任务添加到任务队列里执行
        gevent.joinall(jobs)
        print("Main process Ended")

        print(time.time() - startTime)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(300, 20, 200, 30))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(100, 100, 100, 15))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 100, 500, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setEnabled(True)
        self.pushButton.setGeometry(QtCore.QRect(200, 200, 100, 30))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(600, 200, 100, 30))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(100, 150, 100, 15))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(200, 150, 500, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(200, 60, 400, 20))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(100, 60, 100, 20))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(10)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_2.clicked.connect(self.lineEdit.clear)
        self.pushButton.clicked.connect(self.pushButton.hide)
        self.pushButton_2.clicked.connect(self.pushButton.show)
        self.pushButton.clicked.connect(self.slot1)
        self.pushButton_2.clicked.connect(self.slot2)
        self.pushButton.clicked.connect(send.run)
        self.pushButton_2.clicked.connect(self.lineEdit_2.clear)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "我的应用"))
        self.label.setText(_translate("MainWindow", "       爬取樱花AV"))
        self.label_2.setText(_translate("MainWindow", "请输入url："))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "https://yinghuaav.site/vodtype/27.html"))
        self.pushButton.setText(_translate("MainWindow", "执行"))
        self.pushButton_2.setText(_translate("MainWindow", "重构"))
        self.label_3.setText(_translate("MainWindow", "请输入个数："))
        self.lineEdit_2.setPlaceholderText(_translate("MainWindow", "一页24个视频大约3小时下载一页"))
        self.label_4.setText(_translate("MainWindow", "https://yinghuaav.run/vodtype/31.html"))
        self.label_4.setTextInteractionFlags(Qt.TextSelectableByMouse)#设置可复制
        self.label_5.setText(_translate("MainWindow", "复制网站 ："))

    def slot1(self, MainWindow):
        print('正在执行')
        self.label_5.setText("正在爬取")
        self.label_4.setText("请稍后.....")
        # print(self.pushButton.isVisible())
        # time.sleep(1)
        self.pushButton.hide()#隐藏
        # print(self.pushButton.isVisible())
        #main(self.lineEdit.text(),self.lineEdit_2.text())#获取输入·框的值self.lineEdit.text()
        main(self.lineEdit.text(),int(self.lineEdit_2.text()))#获取输入·框的值self.lineEdit.text()
        # time.sleep(5)
        # self.pushButton.show()     #显示
        print(self.pushButton.isVisible())
        print('执行完成')

    def slot2(self, MainWindow):
        self.label_5.setText("复制网站：")
        self.label_4.setText("https://yinghuaav.run/vodtype/31.html")

# 信号对象
class QTypeSignal(QObject):
    # 定义一个信号
    sendmsg = pyqtSignal(object)

    def __init__(self):
        super(QTypeSignal, self).__init__()

    def run(self):
        # 发射信号
        self.sendmsg.emit('Hello Pyqt5')

# 槽对象
class QTypeSlot(QObject):
    def __init__(self):
        super(QTypeSlot, self).__init__()
        # 槽对象里的槽函数

    def get(self, msg):
        print("QSlot get msg => " + msg)
        #main(url='https://yinghuaav.site/vodtype/27-%s.html')


import sys  #导入系统模块

def show_MainWindow():
    app = QtWidgets.QApplication(sys.argv)         #实例化QApplication类，作为GUI主程序入口
    MainWindow=QtWidgets.QMainWindow()             #创建MainWindow
    ui=Ui_MainWindow()                             #实例化ui类
    ui.setupUi(MainWindow)                         #设置窗口UI
    MainWindow.show()                              #显示窗口
    sys.exit(app.exec_())                          #当窗口创建完成时，需要结束主循环过程


if __name__=="__main__":
    send = QTypeSignal()
    slot = QTypeSlot()
    # 1
    print('--- 把信号绑定到槽函数 ---')
    send.sendmsg.connect(slot.get)
    show_MainWindow()